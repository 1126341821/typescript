结构:
	帮助了解常见库的格式,如何为每种格式书写正确的声明文件。 如果你在编辑一个已经存在的文件，那么你可能不需要阅读此章节。 新的就需要
	组织声明文件的方式取决于库是如何被使用的。 在JavaScript中一个库有很多使用方式，这就需要你书写声明文件去匹配它们。 
识别库的类型：
	首先，我们先看一下TypeScript声明文件能够表示的库的类型。 这里会简单展示每种类型的库的使用方式，如何去书写，还有一些真实案例。

	识别库的类型是书写声明文件的第一步。 我们将会给出一些提示，关于怎样通过库的 使用方法及其源码来识别库的类型。 根据库的文档及组织结构不同，这两种方式可能一个会比另外的那个简单一些。 我们推荐你使用任意你喜欢的方式。
全局库：

	全局命名空间下访问的（例如：不需要使用任何形式的import）。 许多库都是简单的暴露出一个或多个全局变量。 比如，如果你使用过 jQuery，$变量可以被够简单的引用：
	从代码上识别全局库：

	function createGreeting(s) {
	    return "Hello, " + s;
	}

	window.createGreeting = function(s) {
	    return "Hello, " + s;
	}
	当你查看全局库的源代码时，你通常会看到：
	
		顶级的var语句或function声明
		window.someName
		假设DOM原始值像document或window是存在的
	你不会看到：
		比如require或define
		define(...)调用



	